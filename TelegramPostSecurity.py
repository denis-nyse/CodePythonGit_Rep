import asyncio
from telethon import TelegramClient
from datetime import datetime, timedelta
import logging
import re
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_API_ID = '###'
TELEGRAM_API_HASH = '###'
BOT_TOKEN = '###' # –ë–æ—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞–º –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
CHANNELS_FILE = './channelSecurity.txt'
SUMMARY_FILE = 'sum_posts.txt'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_chat_id = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global user_chat_id
    user_chat_id = update.effective_chat.id
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."
    )
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_chat_id}")

def simple_summarize(text, chars=300):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏"""
    text = re.sub(r'http\S+|@\w+|#\w+', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text[:chars] + ('...' if len(text) > chars else '')

async def send_to_user():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–º–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not user_chat_id:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    try:
        bot = Bot(token=BOT_TOKEN)

        with open(SUMMARY_FILE, 'r', encoding='utf-8') as f:
            content = f.read()

        if not content.strip():
            await bot.send_message(chat_id=user_chat_id, text="‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        messages = content.split('\n\n')
        for msg in messages:
            if msg.strip():
                await bot.send_message(chat_id=user_chat_id, text=msg)
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

        logger.info(f"–°–∞–º–º–∞—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def monitor_channels():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10 –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    client = TelegramClient('session_name', TELEGRAM_API_ID, TELEGRAM_API_HASH)

    try:
        await client.start()

        # –û—á–∏—Å—Ç–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        open(SUMMARY_FILE, 'w').close()

        with open(CHANNELS_FILE, 'r', encoding='utf-8') as f:
            all_channels = [line.strip() for line in f if line.strip()]

        logger.info(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(all_channels)}")

        for i in range(0, len(all_channels), 10):
            chunk = all_channels[i:i + 10]
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ {i + 1} - {i + len(chunk)}")

            summaries = []

            for channel in chunk:
                try:
                    now = datetime.now()
                    time_threshold = now - timedelta(hours=24)

                    channel_entity = await client.get_entity(channel)

                    async for message in client.iter_messages(channel_entity):
                        if message.date.replace(tzinfo=None) < time_threshold:
                            break

                        if message.text:
                            post_link = f"https://t.me/{channel}/{message.id}"
                            summary = simple_summarize(message.text)
                            summaries.append(
                                f"üìå –ö–∞–Ω–∞–ª: {channel}\n"
                                f"üïí {message.date.strftime('%Y-%m-%d %H:%M')}\n"
                                f"üîó {post_link}\n"
                                f"üìù {summary}\n\n"
                            )

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel}: {e}")

                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∞–º–º–∞—Ä–∏ —á–∞–Ω–∫–∞
            if summaries:
                with open(SUMMARY_FILE, 'a', encoding='utf-8') as f:
                    f.writelines(summaries)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_to_user()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    finally:
        await client.disconnect()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    await monitor_channels()

if __name__ == '__main__':
    asyncio.run(main())